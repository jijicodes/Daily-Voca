{"version":3,"sources":["components/DateText/DateText.tsx","utils/playAudio.ts","components/WordCard/WordCard.tsx","components/GenericButton/GenericButton.tsx","components/MainView/MainView.tsx","components/WordListItem/WordListItem.tsx","components/ReviewView/ReviewView.tsx","App.tsx","utils/wordList.ts","reportWebVitals.ts","index.tsx"],"names":["DateText","currentYear","format","Date","currentDate","className","playAudio","uri","Promise","resolve","reject","console","log","audio","Audio","addEventListener","play","WordCard","phrase","pronunciation","sentence","definition","audioUrl","useState","playing","setPlaying","onClick","finally","disabled","GenericButton","onPress","label","midnight","getDayOfYear","MainView","onReviewToggle","wordList","wotd","dayOfTheYear","length","todaysWord","WordListItem","starred","onStarToggle","size","ReviewView","setStarred","map","word","App","arrayObjWord","setArrayObjWord","useEffect","axios","get","then","response","reviewing","setReviewing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c274f622.chunk.js","sourcesContent":["import format from \"date-fns/format\";\nimport react, { FC } from \"react\";\nimport \"./DateText.css\";\n\nexport interface Props {}\n\nexport const DateText: FC<Props> = () => {\n  const currentYear = format(new Date(), \"yyyy\");\n  const currentDate = format(new Date(), \"MMM d\");\n  return (\n    <div className=\"date\">\n      <h1>| {currentYear}</h1>\n      <div>{currentDate}</div>\n    </div>\n  );\n};\n","export const playAudio = (uri: string): Promise<void> =>\n  new Promise((resolve, reject) => {\n    console.log(\"dd\");\n    const audio = new Audio(uri);\n    audio.addEventListener(\"ended\", () => {\n      resolve();\n    });\n    audio.play();\n  });\n","import React, { FC, useState } from \"react\";\nimport { playAudio } from \"../../utils/playAudio\";\nimport { WordDefinition } from \"../../utils/wordList\";\nimport \"./WordCard.css\";\n\ntype Props = WordDefinition;\n\nexport const WordCard: FC<Props> = ({\n  phrase,\n  pronunciation,\n  sentence,\n  definition,\n  audioUrl,\n}) => {\n  const [playing, setPlaying] = useState(false);\n  return (\n    <div className=\"wordCard\">\n      <h1>{phrase}</h1>\n      <h3>\n        <button\n          className=\"audioButton\"\n          onClick={() => {\n            setPlaying(true);\n            playAudio(audioUrl).finally(() => setPlaying(false));\n          }}\n          disabled={playing}\n        >\n          üó£Ô∏è\n        </button>{\" \"}\n        [{pronunciation}]\n      </h3>\n      <h4>{sentence}</h4>\n      <div className=\"defnition\">{definition}</div>\n    </div>\n  );\n};\n","import React, { FC, ReactNode } from \"react\";\nimport \"./GenericButton.css\";\n\ninterface Props {\n  onPress: () => void;\n  label: string | ReactNode;\n  disabled?: boolean;\n}\n\nexport const GenericButton: FC<Props> = ({ onPress, label, disabled }) => {\n  return (\n    <button className=\"genericButton\" onClick={onPress} disabled={disabled}>\n      {label}\n    </button>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport \"../MainView/MainView.css\";\nimport { DateText } from \"../DateText/DateText\";\nimport { WordCard } from \"../WordCard/WordCard\";\nimport { WordDefinition, wordListUrl } from \"../../utils/wordList\";\nimport { GenericButton } from \"../GenericButton/GenericButton\";\nimport axios from \"axios\";\nimport getDayOfYear from \"date-fns/getDayOfYear\";\nimport { WordListItem } from \"../WordListItem/WordListItem\";\n\ninterface Props {\n  onReviewToggle: () => void;\n  wordList: WordDefinition[];\n}\n\nconst midnight = getDayOfYear(new Date());\n\nconst todaysWord = (\n  dayOfTheYear: number,\n  wordList: WordDefinition[]\n): WordDefinition => {\n  return wordList[dayOfTheYear % wordList.length];\n};\n\nexport const MainView: FC<Props> = ({ onReviewToggle, wordList }) => {\n  const wotd = todaysWord(midnight, wordList);\n\n  return (\n    <div className=\"body\">\n      <div className=\"frame\">\n        <div className=\"header\">\n          <p className=\"title\">\n            word <br /> of the <br /> day.\n          </p>\n          <DateText />\n        </div>\n        {wotd && <WordCard {...wotd} />}\n        <GenericButton label={\"Review the Word\"} onPress={onReviewToggle} />\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useState } from \"react\";\nimport { WordDefinition } from \"../../utils/wordList\";\nimport { BsFillStarFill, BsStar } from \"react-icons/bs\";\nimport \"../WordListItem/WordListItem.css\";\nimport { GenericButton } from \"../GenericButton/GenericButton\";\nimport { playAudio } from \"../../utils/playAudio\";\n\ntype Props = Pick<WordDefinition, \"phrase\" | \"definition\"> & {\n  starred: boolean;\n  audioUrl: string;\n  onStarToggle: () => void;\n};\n\nconst ICON_SIZE = 30;\n\nexport const WordListItem: FC<Props> = ({\n  phrase,\n  definition,\n  starred,\n  onStarToggle,\n  audioUrl,\n}) => {\n  const [playing, setPlaying] = useState(false);\n\n  console.log(\"WordListItem\", phrase, playing);\n  return (\n    <tr>\n      <td>\n        <button\n          className=\"audioButtonReview\"\n          onClick={() => {\n            setPlaying(true);\n            playAudio(audioUrl).finally(() => setPlaying(false));\n          }}\n          disabled={playing}\n        >\n          üó£Ô∏è\n        </button>\n      </td>\n      <td className=\"word\">\n        <div>{phrase}</div>\n      </td>\n\n      <td className=\"def\">\n        <div>{definition}</div>\n      </td>\n      <td>\n        <GenericButton\n          label={\n            starred ? (\n              <BsStar size={ICON_SIZE} />\n            ) : (\n              <BsFillStarFill size={ICON_SIZE} />\n            )\n          }\n          onPress={onStarToggle}\n        />\n      </td>\n    </tr>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { WordDefinition, wordListUrl } from \"../../utils/wordList\";\nimport { WordListItem } from \"../WordListItem/WordListItem\";\nimport \"./ReviewView.css\";\nimport { BsFillStarFill, BsStar } from \"react-icons/bs\";\n\ninterface Props {\n  wordList: WordDefinition[];\n  onClick: () => void;\n}\n\nconst ICON_SIZE = 30;\n\nexport const ReviewView: FC<Props> = ({ wordList, onClick }) => {\n  const [starred, setStarred] = useState();\n  return (\n    <div className=\"reviewView\">\n      <button className=\"backButton\" onClick={onClick}>\n        üîô\n      </button>\n      <div className=\"header\">\n        <p> Review the Words</p>\n      </div>\n      <div className=\"wordListItem\">\n        <table>\n          {wordList.map((word) => (\n            <WordListItem\n              key={word.phrase}\n              phrase={word.phrase}\n              definition={word.definition}\n              starred={word.starred}\n              audioUrl={word.audioUrl}\n              onStarToggle={() => setStarred(starred)}\n            />\n          ))}\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { WordDefinition, wordListUrl } from \"./utils/wordList\";\nimport getDayOfYear from \"date-fns/getDayOfYear\";\nimport axios from \"axios\";\nimport { MainView } from \"./components/MainView/MainView\";\nimport { ReviewView } from \"./components/ReviewView/ReviewView\";\nimport \"./App.css\";\n\nfunction App() {\n  const [arrayObjWord, setArrayObjWord] = useState<WordDefinition[]>([]);\n  useEffect(() => {\n    axios\n      .get<WordDefinition[]>(wordListUrl)\n      .then((response) => response[\"data\"])\n      .then(setArrayObjWord);\n  }, []);\n  console.log(arrayObjWord);\n\n  const [reviewing, setReviewing] = useState(false);\n  return (\n    <div>\n      {!reviewing ? (\n        <MainView\n          onReviewToggle={() => setReviewing(true)}\n          wordList={arrayObjWord}\n        />\n      ) : (\n        <ReviewView\n          wordList={arrayObjWord}\n          onClick={() => setReviewing(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","export interface WordDefinition {\n  starred: boolean;\n  id: number;\n  phrase: string;\n  pronunciation: string;\n  sentence: string;\n  definition: string;\n  audioUrl: string;\n}\n\nexport const wordListUrl =\n  \"https://gist.githubusercontent.com/jijicodes/d077ebaeddf0b273a6e3ed79e9383a32/raw/10c744c6b45e6b0496baa6fceacccd373b73e11d/koreanWord.json\";\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}